name: oxlint ecosystem ci

on:
  schedule:
    - cron: "0 */3 * * *" # Every 3 hours.
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '**/*.md'
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:
    inputs: # for create comment action https://github.com/peter-evans/create-or-update-comment?tab=readme-ov-file#action-inputs
      issue-number:
        required: false
        type: string
      comment-id:
        required: false
        type: string
      ref:
        required: false
        type: string
        default: 'main'

jobs:
  reply:
    name: Reply
    if: ${{ inputs.issue-number && inputs.comment-id }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4
        with:
          token: ${{ secrets.OXC_BOT_PAT }}
          repository: oxc-project/oxc
          issue-number: ${{ inputs.issue-number }}
          comment-id: ${{ inputs.comment-id }}
          reactions: eyes

  build:
    name: Build
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: oxc-project/oxc
          ref: ${{ inputs.ref }}
          persist-credentials: false
          show-progress: false

      - uses: oxc-project/setup-rust@d286d43bc1f606abbd98096666ff8be68c8d5f57 # v1.0.2
        with:
          save-cache: ${{ github.ref_name == 'main' }}

      - uses: oxc-project/setup-node@fdbf0dfd334c4e6d56ceeb77d91c76339c2a0885 # v1.0.4

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

      - run: pnpm install
        working-directory: ./apps/oxlint

      - run: pnpm run build
        working-directory: ./apps/oxlint
        env:
          RUSTFLAGS: "-C debug-assertions=true"

      - run: pnpm pack
        working-directory: ./apps/oxlint

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          if-no-files-found: error
          name: oxlint
          path: ./apps/oxlint/oxlint-*.tgz

  checkout:
    name: Read matrix.json
    needs: build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setmatrix.outputs.content }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - id: setmatrix
        uses: jaywcjlove/github-action-read-file@d7632d78b76cbfbe8841dc31dd08dd2020175c80 # main
        with:
          localfile: ./matrix.json

  test:
    needs: checkout
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.checkout.outputs.matrix) }}
    name: Test ${{ matrix.repository }}
    steps:
      - name: Clone ${{ matrix.repository }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          repository: ${{ matrix.repository }}
          ref: ${{ matrix.ref }}
          path: ${{ matrix.path }}
          persist-credentials: false
          show-progress: false

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: oxlint
          path: ${{ matrix.path }}

      - uses: oxc-project/setup-node@fdbf0dfd334c4e6d56ceeb77d91c76339c2a0885 # v1.0.4

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          version: 10

      - name: Install oxlint package
        run: |
          # Extract and install the package
          tar -xzf ${{ matrix.path }}/oxlint-*.tgz
          npm install -g ./package

          # Create a wrapper script that uses node explicitly
          OXLINT_PATH=$(which oxlint)
          if [ -f "$OXLINT_PATH" ]; then
            mv "$OXLINT_PATH" "${OXLINT_PATH}.js"
            echo '#!/usr/bin/env bash' > "$OXLINT_PATH"
            echo "exec node '${OXLINT_PATH}.js' \"\$@\"" >> "$OXLINT_PATH"
            chmod +x "$OXLINT_PATH"
          fi

      - name: Run
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.command }}

      - name: Check Panic
        working-directory: ${{ matrix.path }}
        run: |
          set +e # disable exit on run

          oxlint --fix --import-plugin --jest-plugin --jsdoc-plugin --jsx-a11y-plugin --nextjs-plugin --react-perf-plugin --node-plugin --promise-plugin -D all --silent

          EXIT_CODE=$?

          # Panic returns exit code > 1, e.g. 101 when a Rust program panics
          if [ $EXIT_CODE -gt 1 ]; then
              echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT
              exit $EXIT_CODE
          fi

          echo "exitcode=0" >> $GITHUB_OUTPUT
          exit 0

  comment:
    needs: test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Reply Comment
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        id: script
        if: ${{ inputs.issue-number }}
        with:
          github-token: ${{ secrets.OXC_BOT_PAT }}
          result-encoding: string
          script: |
            const {
              data: { jobs },
            } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
              per_page: 100,
            });
            let result = jobs
              .filter((job) => job.name.startsWith("Test "))
              .map((job) => {
                const suite = job.name.slice(5);
                return { suite, conclusion: job.conclusion, link: job.html_url };
              });
            const url = `${context.serverUrl}//${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const urlLink = `[Open](${url})`;
            const conclusionEmoji = {
              success: ":white_check_mark:",
              failure: ":x:",
              cancelled: ":stop_button:",
            };
            const body = `
            ## [Oxlint Ecosystem CI](${urlLink})
            | suite | result |
            |-------|--------|
            ${result.map((r) => `| [${r.suite}](${r.link}) | ${conclusionEmoji[r.conclusion]} |`).join("\n")}
            `;
            return body;

      - uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4
        if: ${{ inputs.issue-number && inputs.comment-id }}
        with:
          token: ${{ secrets.OXC_BOT_PAT }}
          repository: oxc-project/oxc
          issue-number: ${{ inputs.issue-number }}
          comment-id: ${{ inputs.comment-id }}
          body: ${{ steps.script.outputs.result }}
          edit-mode: replace
